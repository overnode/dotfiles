alias ls='ls --color=auto --group-directories-first -F --time-style=+"%d.%m.%Y %H:%M"'
# alias ls='eza --icons --group-directories-first'
alias ll='ls -alhF --color=auto'
# alias ll='eza -alh --icons --group-directories-first'
alias mv='mv -vi'
alias cp='cp -vi'
alias wget='wget -c'
alias grep='grep --color=auto'
alias v='nvim'
alias ip='ip -c'
alias n='nnn -d -e'

alias lsblk='lsblk -o NAME,SIZE,FSTYPE,MOUNTPOINT,LABEL,MODEL'
alias jctl='journalctl -p3 -xb'

# Alias for dotfiles git-config in .dotfiles
alias config='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

alias v='lvim'

alias gl="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gg='git log --oneline --abbrev-commit --all --graph --decorate --color'
alias glo="git log --oneline"

alias nets='sudo netstat -nlptu'
alias nets2='sudo lsof -i'

alias irssi='TERM=screen-256color irssi'
alias cav='cava -i fifo -p /tmp/mpd.fifo -c magenta'

alias bigfiles='find . -size +250M -exec ls -a --size -h {} \+ | sort -rh'

alias pacorp='sudo pacman -Rns $(pacman -Qqtd)'
alias cleanpaccache='paccache -rk2 && paccache -ruk0'

# identify active network connections
# http://alias.sh/identify-and-search-active-network-connections
alias spy='lsof -i -P +c 0 +M'

#alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

# transfer.sh func {{{
function transfer; {
    if [ $# -eq 0 ]; then
        echo "No arguments specified. Usage:\ntransfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
        return 1;
    fi

    tmpfile=$(mktemp -t transferXXX);
    if tty -s; then
        basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
        curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
    else
        curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile;
    fi

    cat $tmpfile;
    rm -f $tmpfile;
}
# }}}

function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
 else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.cbr|*.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.cbz|*.epub|*.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *.cpio)      cpio -id < ./"$n"  ;;
            *.cba|*.ace)      unace x ./"$n"      ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}

# URL encode something and print it. {{{
function url-encode; {
setopt extendedglob
 echo "${${(j: :)@}//(#b)(?)/%$[[##16]##${match[1]}]}"
} # }}}

# Search google for the given keywords. {{{
function google; {
  $BROWSER "http://www.google.com/search?q=`url-encode "${(j: :)@}"`"
}
